#!/usr/bin/env python
"""
Sistema de valida√ß√£o para garantir que n√≠vel 0 = meio
"""
import os
import sys
import django

# Configurar Django
sys.path.append('/workspaces/controle_validade_estoque')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'validade_estoque.settings')
django.setup()

from produtos.models import Armazenamento
from django.db.models.signals import pre_save
from django.dispatch import receiver

def validar_regra_nivel_0():
    """Valida√ß√£o completa da regra: n√≠vel 0 deve ser 'meio'"""
    print("‚úÖ VALIDA√á√ÉO: Regra N√≠vel 0 = Meio")
    print("=" * 40)
    
    # Verificar todos os endere√ßos n√≠vel 0
    total_nivel_0 = Armazenamento.objects.filter(nivel=0).count()
    corretos_nivel_0 = Armazenamento.objects.filter(nivel=0, categoria_armazenamento='meio').count()
    incorretos_nivel_0 = Armazenamento.objects.filter(nivel=0, categoria_armazenamento='inteiro').count()
    
    print(f"üìä ESTAT√çSTICAS:")
    print(f"   ‚Ä¢ Total de endere√ßos n√≠vel 0: {total_nivel_0}")
    print(f"   ‚Ä¢ Corretos (meio): {corretos_nivel_0}")
    print(f"   ‚Ä¢ Incorretos (inteiro): {incorretos_nivel_0}")
    
    if incorretos_nivel_0 == 0:
        print(f"\nüéâ PERFEITO! Todos os endere√ßos n√≠vel 0 est√£o corretos!")
    else:
        print(f"\n‚ö†Ô∏è  ATEN√á√ÉO! {incorretos_nivel_0} endere√ßos n√≠vel 0 est√£o incorretos!")
    
    # Verificar outros n√≠veis para compara√ß√£o
    print(f"\nüìã DISTRIBUI√á√ÉO POR N√çVEL:")
    for nivel in range(0, 5):  # Verificar n√≠veis 0-4
        total = Armazenamento.objects.filter(nivel=nivel).count()
        inteiros = Armazenamento.objects.filter(nivel=nivel, categoria_armazenamento='inteiro').count()
        meios = Armazenamento.objects.filter(nivel=nivel, categoria_armazenamento='meio').count()
        
        if total > 0:
            status = "‚úÖ" if (nivel == 0 and meios == total) or nivel > 0 else "‚ö†Ô∏è"
            print(f"   ‚Ä¢ N√≠vel {nivel}: {total} total ({inteiros} inteiros, {meios} meios) {status}")
    
    return incorretos_nivel_0 == 0

def criar_validacao_automatica():
    """Cria um sistema de valida√ß√£o autom√°tica para novos endere√ßos"""
    print(f"\nüõ°Ô∏è  IMPLEMENTANDO VALIDA√á√ÉO AUTOM√ÅTICA...")
    
    # Criar um decorator/fun√ß√£o de valida√ß√£o
    validacao_code = '''
# Adicionar ao models.py - Valida√ß√£o autom√°tica para n√≠vel 0
from django.core.exceptions import ValidationError

def clean(self):
    """Valida√ß√£o customizada para endere√ßos"""
    if self.nivel == 0 and self.categoria_armazenamento != 'meio':
        raise ValidationError({
            'categoria_armazenamento': 'Endere√ßos no n√≠vel 0 devem ser do tipo "meio" (sa√≠da).'
        })
    super().clean()

# Adicionar ao save() do modelo
def save(self, *args, **kwargs):
    # Auto-corre√ß√£o: se n√≠vel 0, for√ßar como 'meio'
    if self.nivel == 0:
        self.categoria_armazenamento = 'meio'
    super().save(*args, **kwargs)
    '''
    
    print("üìù C√≥digo de valida√ß√£o gerado (para implementar no models.py)")
    return validacao_code

def testar_logica_negocio():
    """Testa a l√≥gica de neg√≥cio dos tipos de endere√ßo"""
    print(f"\nüß† L√ìGICA DE NEG√ìCIO:")
    print("=" * 30)
    
    print("üì¶ TIPOS DE ENDERE√áO:")
    print("   ‚Ä¢ üîµ INTEIRO (Palete Fechado):")
    print("     - Para produtos em paletes completos")
    print("     - Geralmente em n√≠veis superiores (1, 2, 3+)")
    print("     - Armazenamento de longo prazo")
    
    print("   ‚Ä¢ üü° MEIO (Sa√≠da):")
    print("     - Para produtos em picking/expedi√ß√£o")
    print("     - SEMPRE no n√≠vel 0 (t√©rreo/sa√≠da)")
    print("     - F√°cil acesso para retirada")
    
    print(f"\nüìè REGRA FUNDAMENTAL:")
    print("   ‚úÖ N√≠vel 0 = SEMPRE 'meio' (√°rea de sa√≠da)")
    print("   ‚úÖ N√≠veis 1+ = podem ser 'inteiro' ou 'meio'")
    
    # Verificar se a regra est√° sendo seguida
    violacoes = Armazenamento.objects.filter(
        nivel=0, 
        categoria_armazenamento='inteiro'
    ).count()
    
    print(f"\nüéØ STATUS DA REGRA:")
    if violacoes == 0:
        print("   ‚úÖ REGRA RESPEITADA: Todos os n√≠veis 0 s√£o 'meio'")
    else:
        print(f"   ‚ùå VIOLA√á√ïES: {violacoes} endere√ßos n√≠vel 0 como 'inteiro'")
    
    return violacoes == 0

if __name__ == "__main__":
    try:
        print("üîç SISTEMA DE VALIDA√á√ÉO - N√çVEL 0")
        print("=" * 50)
        
        # 1. Validar regra atual
        regra_ok = validar_regra_nivel_0()
        
        # 2. Testar l√≥gica de neg√≥cio
        logica_ok = testar_logica_negocio()
        
        # 3. Gerar c√≥digo de valida√ß√£o
        if regra_ok:
            codigo_validacao = criar_validacao_automatica()
        
        print(f"\nüìä RESUMO FINAL:")
        print(f"   ‚Ä¢ Regra n√≠vel 0 = meio: {'‚úÖ OK' if regra_ok else '‚ùå Pendente'}")
        print(f"   ‚Ä¢ L√≥gica de neg√≥cio: {'‚úÖ Consistente' if logica_ok else '‚ùå Inconsistente'}")
        print(f"   ‚Ä¢ Sistema validado: {'‚úÖ Completo' if regra_ok and logica_ok else '‚ö†Ô∏è Necessita aten√ß√£o'}")
        
        if regra_ok and logica_ok:
            print(f"\nüéâ SISTEMA PERFEITO!")
            print("   ‚Ä¢ Todos os endere√ßos n√≠vel 0 est√£o como 'meio'")
            print("   ‚Ä¢ Regra de neg√≥cio est√° sendo respeitada")
            print("   ‚Ä¢ Armaz√©m organizado corretamente")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a valida√ß√£o: {str(e)}")
        import traceback
        traceback.print_exc()
