#!/usr/bin/env python
"""
Sistema de Endere√ßamento Melhorado - Controle de Validade de Estoque
Implementa c√≥digos √∫nicos e melhorias visuais para gerenciamento profissional
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'validade_estoque.settings')
django.setup()

from produtos.models import Produto, Armazenamento, Estoque

def gerar_codigo_endereco(rua, predio, nivel, ap):
    """Gera c√≥digo √∫nico para endere√ßo no formato RUA-PREDIO-NIVEL-AP"""
    return f"{str(rua).zfill(2)}-{str(predio).zfill(2)}-{str(nivel).zfill(2)}-{str(ap).zfill(2)}"

def atualizar_codigos_enderecos():
    """Atualiza todos os endere√ßos com c√≥digos √∫nicos"""
    print("=== ATUALIZA√á√ÉO DE C√ìDIGOS DE ENDERE√áOS ===\n")
    
    enderecos = Armazenamento.objects.all().order_by('rua', 'predio', 'nivel', 'ap')
    
    print(f"üìä Total de endere√ßos: {enderecos.count()}")
    
    if enderecos.count() == 0:
        print("‚ùå Nenhum endere√ßo encontrado!")
        return
    
    print(f"\nüìã EXEMPLOS DE C√ìDIGOS (primeiros 10):")
    for i, endereco in enumerate(enderecos[:10]):
        codigo_novo = gerar_codigo_endereco(endereco.rua, endereco.predio, endereco.nivel, endereco.ap)
        print(f"   {i+1}. {endereco} ‚Üí C√≥digo: {codigo_novo}")
    
    resposta = input(f"\nDeseja prosseguir com a atualiza√ß√£o de c√≥digos? (s/n): ").lower().strip()
    
    if resposta != 's':
        print("‚ùå Atualiza√ß√£o cancelada pelo usu√°rio.")
        return
    
    print(f"\nüîÑ Atualizando c√≥digos...")
    
    # Verificar se h√° campo 'codigo' no modelo
    from django.db import connection
    with connection.cursor() as cursor:
        cursor.execute("PRAGMA table_info(produtos_armazenamento)")
        colunas = [row[1] for row in cursor.fetchall()]
        
        if 'codigo' not in colunas:
            print("‚ö†Ô∏è  Campo 'codigo' n√£o existe no modelo Armazenamento")
            print("üìù Ser√° necess√°rio criar uma migra√ß√£o para adicionar o campo")
            return criar_migracoes_enderecamento()
    
    # Atualizar c√≥digos existentes
    atualizados = 0
    for endereco in enderecos:
        codigo_novo = gerar_codigo_endereco(endereco.rua, endereco.predio, endereco.nivel, endereco.ap)
        endereco.codigo = codigo_novo
        endereco.save()
        atualizados += 1
        
        if atualizados % 20 == 0:
            print(f"‚úÖ {atualizados} endere√ßos atualizados...")
    
    print(f"\nüéâ ATUALIZA√á√ÉO CONCLU√çDA!")
    print(f"‚úÖ {atualizados} endere√ßos atualizados com c√≥digos √∫nicos")

def criar_migracoes_enderecamento():
    """Cria as migra√ß√µes necess√°rias para o sistema melhorado"""
    print("\n=== CRIA√á√ÉO DE MIGRA√á√ïES ===\n")
    
    # Conte√∫do da migra√ß√£o
    conteudo_migracao = '''# Generated by Sistema de Endere√ßamento Melhorado
from django.db import migrations, models

class Migration(migrations.Migration):

    dependencies = [
        ('produtos', '0001_initial'),  # Ajuste conforme sua √∫ltima migra√ß√£o
    ]

    operations = [
        migrations.AddField(
            model_name='armazenamento',
            name='codigo',
            field=models.CharField(max_length=20, unique=True, blank=True, null=True, verbose_name='C√≥digo do Endere√ßo'),
        ),
        migrations.AddField(
            model_name='armazenamento',
            name='descricao',
            field=models.CharField(max_length=200, blank=True, null=True, verbose_name='Descri√ß√£o'),
        ),
        migrations.AddField(
            model_name='armazenamento',
            name='ativo',
            field=models.BooleanField(default=True, verbose_name='Ativo'),
        ),
        migrations.AddField(
            model_name='armazenamento',
            name='data_criacao',
            field=models.DateTimeField(auto_now_add=True, null=True, verbose_name='Data de Cria√ß√£o'),
        ),
        migrations.AddField(
            model_name='armazenamento',
            name='data_modificacao',
            field=models.DateTimeField(auto_now=True, null=True, verbose_name='√öltima Modifica√ß√£o'),
        ),
    ]
'''
    
    # Criar arquivo de migra√ß√£o
    import glob
    from datetime import datetime
    
    # Encontrar pr√≥ximo n√∫mero de migra√ß√£o
    migracao_files = glob.glob('c:/Users/alexs/controle_projeto/produtos/migrations/0*.py')
    if migracao_files:
        numeros = [int(f.split('_')[0][-4:]) for f in migracao_files if f.split('_')[0][-4:].isdigit()]
        proximo_numero = max(numeros) + 1 if numeros else 2
    else:
        proximo_numero = 2
    
    nome_arquivo = f"0{str(proximo_numero).zfill(3)}_enderecamento_melhorado.py"
    caminho_migracao = f"c:/Users/alexs/controle_projeto/produtos/migrations/{nome_arquivo}"
    
    with open(caminho_migracao, 'w', encoding='utf-8') as f:
        f.write(conteudo_migracao)
    
    print(f"‚úÖ Migra√ß√£o criada: {nome_arquivo}")
    print(f"üìÅ Localiza√ß√£o: {caminho_migracao}")
    
    # Executar migra√ß√£o
    print(f"\nüîÑ Aplicando migra√ß√£o...")
    import subprocess
    try:
        result = subprocess.run(['python', 'manage.py', 'migrate'], 
                              capture_output=True, text=True, cwd='c:/Users/alexs/controle_projeto')
        
        if result.returncode == 0:
            print("‚úÖ Migra√ß√£o aplicada com sucesso!")
            return True
        else:
            print(f"‚ùå Erro ao aplicar migra√ß√£o: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao executar migra√ß√£o: {e}")
        return False

def criar_templates_melhorados():
    """Cria templates melhorados para o sistema de endere√ßamento"""
    print("\n=== CRIA√á√ÉO DE TEMPLATES MELHORADOS ===\n")
    
    # Template para busca avan√ßada de endere√ßos
    template_busca_endereco = '''{% extends 'base.html' %}
{% load static %}

{% block title %}üè¢ Busca Avan√ßada de Endere√ßos{% endblock %}

{% block extra_css %}
<style>
    .search-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        color: white;
    }
    
    .search-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .search-field {
        display: flex;
        flex-direction: column;
    }
    
    .search-field label {
        font-weight: 600;
        margin-bottom: 8px;
        font-size: 14px;
    }
    
    .search-field input, .search-field select {
        padding: 12px;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        background: rgba(255,255,255,0.9);
    }
    
    .search-actions {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-top: 25px;
    }
    
    .btn-search {
        background: #28a745;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }
    
    .btn-search:hover {
        background: #218838;
        transform: translateY(-2px);
    }
    
    .btn-clear {
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }
    
    .endereco-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border-left: 5px solid #007bff;
        transition: all 0.3s;
    }
    
    .endereco-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .endereco-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .endereco-codigo {
        background: #e3f2fd;
        color: #1976d2;
        padding: 6px 12px;
        border-radius: 20px;
        font-weight: bold;
        font-size: 14px;
    }
    
    .endereco-status {
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: bold;
    }
    
    .status-vazio {
        background: #d4edda;
        color: #155724;
    }
    
    .status-ocupado {
        background: #f8d7da;
        color: #721c24;
    }
    
    .endereco-info {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        margin-bottom: 15px;
    }
    
    .info-item {
        display: flex;
        flex-direction: column;
    }
    
    .info-label {
        font-size: 12px;
        color: #6c757d;
        font-weight: 600;
        text-transform: uppercase;
        margin-bottom: 4px;
    }
    
    .info-value {
        font-size: 16px;
        color: #343a40;
        font-weight: 500;
    }
    
    .endereco-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }
    
    .btn-action {
        padding: 8px 15px;
        border: none;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        transition: all 0.3s;
    }
    
    .btn-primary {
        background: #007bff;
        color: white;
    }
    
    .btn-success {
        background: #28a745;
        color: white;
    }
    
    .btn-warning {
        background: #ffc107;
        color: #212529;
    }
    
    .btn-action:hover {
        transform: translateY(-1px);
        opacity: 0.9;
    }
    
    .results-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }
    
    .results-count {
        font-weight: 600;
        color: #495057;
    }
    
    .sort-options {
        display: flex;
        gap: 10px;
        align-items: center;
    }
    
    .sort-options select {
        padding: 6px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="search-container">
        <h1>üè¢ Busca Avan√ßada de Endere√ßos</h1>
        <p>Encontre endere√ßos por c√≥digo, localiza√ß√£o ou status</p>
        
        <form method="GET" class="search-form">
            <div class="search-grid">
                <div class="search-field">
                    <label>üîç C√≥digo do Endere√ßo</label>
                    <input type="text" name="codigo" value="{{ request.GET.codigo }}" 
                           placeholder="Ex: 01-02-00-01">
                </div>
                
                <div class="search-field">
                    <label>üõ£Ô∏è Rua</label>
                    <input type="text" name="rua" value="{{ request.GET.rua }}" 
                           placeholder="Ex: 1">
                </div>
                
                <div class="search-field">
                    <label>üè¢ Pr√©dio</label>
                    <input type="text" name="predio" value="{{ request.GET.predio }}" 
                           placeholder="Ex: 2">
                </div>
                
                <div class="search-field">
                    <label>üìç N√≠vel</label>
                    <input type="text" name="nivel" value="{{ request.GET.nivel }}" 
                           placeholder="Ex: 0">
                </div>
                
                <div class="search-field">
                    <label>üö™ Apartamento</label>
                    <input type="text" name="ap" value="{{ request.GET.ap }}" 
                           placeholder="Ex: 1">
                </div>
                
                <div class="search-field">
                    <label>üì¶ Status</label>
                    <select name="status">
                        <option value="">Todos</option>
                        <option value="vazio" {% if request.GET.status == 'vazio' %}selected{% endif %}>Vazio</option>
                        <option value="ocupado" {% if request.GET.status == 'ocupado' %}selected{% endif %}>Ocupado</option>
                    </select>
                </div>
                
                <div class="search-field">
                    <label>üè∑Ô∏è Tipo</label>
                    <select name="tipo">
                        <option value="">Todos</option>
                        <option value="inteiro" {% if request.GET.tipo == 'inteiro' %}selected{% endif %}>Palete Fechado</option>
                        <option value="meio" {% if request.GET.tipo == 'meio' %}selected{% endif %}>Sa√≠da</option>
                    </select>
                </div>
            </div>
            
            <div class="search-actions">
                <button type="submit" class="btn-search">üîç Buscar</button>
                <a href="{% url 'busca_endereco_avancada' %}" class="btn-clear">üîÑ Limpar</a>
            </div>
        </form>
    </div>
    
    {% if enderecos %}
    <div class="results-header">
        <div class="results-count">
            üìä {{ enderecos|length }} endere√ßo{{ enderecos|length|pluralize }} encontrado{{ enderecos|length|pluralize }}
        </div>
        <div class="sort-options">
            <label>Ordenar por:</label>
            <select onchange="location.href='?' + new URLSearchParams(Object.assign(Object.fromEntries(new URLSearchParams(location.search)), {sort: this.value})).toString()">
                <option value="codigo" {% if request.GET.sort == 'codigo' %}selected{% endif %}>C√≥digo</option>
                <option value="rua" {% if request.GET.sort == 'rua' %}selected{% endif %}>Rua</option>
                <option value="ocupacao" {% if request.GET.sort == 'ocupacao' %}selected{% endif %}>Ocupa√ß√£o</option>
            </select>
        </div>
    </div>
    
    <div class="endereco-results">
        {% for endereco in enderecos %}
        <div class="endereco-card">
            <div class="endereco-header">
                <div class="endereco-codigo">üìç {{ endereco.codigo|default:"SEM-C√ìDIGO" }}</div>
                <div class="endereco-status {% if endereco.ocupacao_atual > 0 %}status-ocupado{% else %}status-vazio{% endif %}">
                    {% if endereco.ocupacao_atual > 0 %}
                        üî¥ Ocupado ({{ endereco.ocupacao_atual }})
                    {% else %}
                        üü¢ Vazio
                    {% endif %}
                </div>
            </div>
            
            <div class="endereco-info">
                <div class="info-item">
                    <div class="info-label">Rua</div>
                    <div class="info-value">{{ endereco.rua }}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Pr√©dio</div>
                    <div class="info-value">{{ endereco.predio }}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">N√≠vel</div>
                    <div class="info-value">{{ endereco.nivel }}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Apartamento</div>
                    <div class="info-value">{{ endereco.ap }}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Tipo</div>
                    <div class="info-value">
                        {% if endereco.categoria_armazenamento == 'inteiro' %}
                            üîµ Palete Fechado
                        {% else %}
                            üü° Sa√≠da
                        {% endif %}
                    </div>
                </div>
                <div class="info-item">
                    <div class="info-label">Capacidade</div>
                    <div class="info-value">{{ endereco.ocupacao_atual }}/{{ endereco.capacidade_maxima }}</div>
                </div>
            </div>
            
            <div class="endereco-actions">
                {% if endereco.ocupacao_atual == 0 %}
                    <a href="{% url 'buscar_produto_endereco' endereco.id %}" class="btn-action btn-success">
                        üì¶ Armazenar Produto
                    </a>
                {% endif %}
                <a href="{% url 'editar_endereco' endereco.id %}" class="btn-action btn-warning">
                    ‚úèÔ∏è Editar
                </a>
                <a href="{% url 'painel' %}?highlight={{ endereco.id }}" class="btn-action btn-primary">
                    üëÅÔ∏è Ver no Painel
                </a>
            </div>
        </div>
        {% endfor %}
    </div>
    {% elif request.GET %}
    <div class="alert alert-info">
        <h4>üîç Nenhum endere√ßo encontrado</h4>
        <p>Tente ajustar os crit√©rios de busca.</p>
    </div>
    {% endif %}
</div>
{% endblock %}

{% block extra_js %}
<script>
// Auto-formata√ß√£o do c√≥digo
document.querySelector('input[name="codigo"]').addEventListener('input', function(e) {
    let value = e.target.value.replace(/[^0-9]/g, '');
    if (value.length >= 2) value = value.substring(0,2) + '-' + value.substring(2);
    if (value.length >= 5) value = value.substring(0,5) + '-' + value.substring(5);
    if (value.length >= 8) value = value.substring(0,8) + '-' + value.substring(8);
    e.target.value = value;
});
</script>
{% endblock %}'''
    
    # Salvar template
    with open('c:/Users/alexs/controle_projeto/produtos/templates/produtos/busca_endereco_avancada.html', 'w', encoding='utf-8') as f:
        f.write(template_busca_endereco)
    
    print("‚úÖ Template de busca avan√ßada criado")
    
    # Template para QR Code de endere√ßos
    template_qr_endereco = '''{% extends 'base.html' %}
{% load static %}

{% block title %}üì± QR Code - {{ endereco.codigo }}{% endblock %}

{% block extra_css %}
<style>
    .qr-container {
        text-align: center;
        padding: 40px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        margin: 20px auto;
        max-width: 500px;
    }
    
    .qr-header {
        margin-bottom: 30px;
    }
    
    .qr-code {
        margin: 30px 0;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        display: inline-block;
    }
    
    .endereco-info {
        background: #e3f2fd;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    }
    
    .info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        text-align: left;
    }
    
    .info-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }
    
    .info-label {
        font-weight: 600;
        color: #495057;
    }
    
    .info-value {
        color: #212529;
    }
    
    .print-section {
        margin-top: 30px;
    }
    
    .btn-print {
        background: #28a745;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        margin: 10px;
        transition: all 0.3s;
    }
    
    .btn-print:hover {
        background: #218838;
        transform: translateY(-2px);
    }
    
    @media print {
        body * {
            visibility: hidden;
        }
        .qr-container, .qr-container * {
            visibility: visible;
        }
        .qr-container {
            position: absolute;
            left: 0;
            top: 0;
            box-shadow: none;
            margin: 0;
        }
        .print-section {
            display: none;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="qr-container">
    <div class="qr-header">
        <h1>üì± QR Code do Endere√ßo</h1>
        <h2>{{ endereco.codigo|default:"SEM-C√ìDIGO" }}</h2>
    </div>
    
    <div class="qr-code">
        <canvas id="qrcode"></canvas>
    </div>
    
    <div class="endereco-info">
        <h3>üìç Informa√ß√µes do Endere√ßo</h3>
        <div class="info-grid">
            <div class="info-item">
                <span class="info-label">C√≥digo:</span>
                <span class="info-value">{{ endereco.codigo|default:"SEM-C√ìDIGO" }}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Rua:</span>
                <span class="info-value">{{ endereco.rua }}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Pr√©dio:</span>
                <span class="info-value">{{ endereco.predio }}</span>
            </div>
            <div class="info-item">
                <span class="info-label">N√≠vel:</span>
                <span class="info-value">{{ endereco.nivel }}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Apartamento:</span>
                <span class="info-value">{{ endereco.ap }}</span>
            </div>
            <div class="info-item">
                <span class="info-label">Tipo:</span>
                <span class="info-value">
                    {% if endereco.categoria_armazenamento == 'inteiro' %}
                        üîµ Palete Fechado
                    {% else %}
                        üü° Sa√≠da
                    {% endif %}
                </span>
            </div>
            <div class="info-item">
                <span class="info-label">Status:</span>
                <span class="info-value">
                    {% if endereco.ocupacao_atual > 0 %}
                        üî¥ Ocupado ({{ endereco.ocupacao_atual }})
                    {% else %}
                        üü¢ Vazio
                    {% endif %}
                </span>
            </div>
            <div class="info-item">
                <span class="info-label">Capacidade:</span>
                <span class="info-value">{{ endereco.ocupacao_atual }}/{{ endereco.capacidade_maxima }}</span>
            </div>
        </div>
    </div>
    
    <div class="print-section">
        <button onclick="window.print()" class="btn-print">üñ®Ô∏è Imprimir</button>
        <a href="{% url 'painel' %}" class="btn-print" style="background: #6c757d; text-decoration: none;">‚Üê Voltar</a>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.min.js"></script>
<script>
// Gerar QR Code
document.addEventListener('DOMContentLoaded', function() {
    const qr = qrcode(0, 'M');
    const enderecoData = {
        codigo: '{{ endereco.codigo|default:"SEM-C√ìDIGO" }}',
        rua: '{{ endereco.rua }}',
        predio: '{{ endereco.predio }}',
        nivel: '{{ endereco.nivel }}',
        ap: '{{ endereco.ap }}',
        tipo: '{{ endereco.categoria_armazenamento }}',
        url: window.location.origin + '{% url "busca_endereco_avancada" %}?codigo={{ endereco.codigo|default:"" }}'
    };
    
    qr.addData(JSON.stringify(enderecoData));
    qr.make();
    
    const canvas = document.getElementById('qrcode');
    const ctx = canvas.getContext('2d');
    const size = 200;
    const moduleCount = qr.getModuleCount();
    const moduleSize = size / moduleCount;
    
    canvas.width = size;
    canvas.height = size;
    
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, size, size);
    
    ctx.fillStyle = '#000000';
    for (let row = 0; row < moduleCount; row++) {
        for (let col = 0; col < moduleCount; col++) {
            if (qr.isDark(row, col)) {
                ctx.fillRect(col * moduleSize, row * moduleSize, moduleSize, moduleSize);
            }
        }
    }
});
</script>
{% endblock %}'''
    
    # Salvar template QR Code
    with open('c:/Users/alexs/controle_projeto/produtos/templates/produtos/qr_endereco.html', 'w', encoding='utf-8') as f:
        f.write(template_qr_endereco)
    
    print("‚úÖ Template de QR Code criado")
    
    return True

def criar_views_melhoradas():
    """Cria views melhoradas para o sistema de endere√ßamento"""
    print("\n=== CRIA√á√ÉO DE VIEWS MELHORADAS ===\n")
    
    # View para busca avan√ßada
    view_busca_avancada = '''
@login_required
def busca_endereco_avancada(request):
    """Busca avan√ßada de endere√ßos com filtros m√∫ltiplos"""
    enderecos = Armazenamento.objects.all()
    
    # Aplicar filtros
    codigo = request.GET.get('codigo', '').strip()
    rua = request.GET.get('rua', '').strip()
    predio = request.GET.get('predio', '').strip()
    nivel = request.GET.get('nivel', '').strip()
    ap = request.GET.get('ap', '').strip()
    status = request.GET.get('status', '').strip()
    tipo = request.GET.get('tipo', '').strip()
    sort = request.GET.get('sort', 'codigo')
    
    if codigo:
        enderecos = enderecos.filter(codigo__icontains=codigo)
    if rua:
        enderecos = enderecos.filter(rua__icontains=rua)
    if predio:
        enderecos = enderecos.filter(predio__icontains=predio)
    if nivel:
        enderecos = enderecos.filter(nivel__icontains=nivel)
    if ap:
        enderecos = enderecos.filter(ap__icontains=ap)
    if tipo:
        enderecos = enderecos.filter(categoria_armazenamento=tipo)
    
    # Filtro por status (vazio/ocupado)
    if status == 'vazio':
        enderecos = [e for e in enderecos if e.ocupacao_atual() == 0]
    elif status == 'ocupado':
        enderecos = [e for e in enderecos if e.ocupacao_atual() > 0]
    else:
        enderecos = list(enderecos)
    
    # Ordena√ß√£o
    if sort == 'codigo':
        enderecos.sort(key=lambda x: x.codigo or 'ZZZZ')
    elif sort == 'rua':
        enderecos.sort(key=lambda x: (int(x.rua) if x.rua.isdigit() else x.rua, 
                                     int(x.predio) if x.predio.isdigit() else x.predio))
    elif sort == 'ocupacao':
        enderecos.sort(key=lambda x: x.ocupacao_atual(), reverse=True)
    
    return render(request, 'produtos/busca_endereco_avancada.html', {
        'enderecos': enderecos,
    })

@login_required
def qr_endereco(request, endereco_id):
    """Gera QR Code para um endere√ßo espec√≠fico"""
    endereco = get_object_or_404(Armazenamento, id=endereco_id)
    return render(request, 'produtos/qr_endereco.html', {
        'endereco': endereco,
    })

@login_required
def gerar_codigos_endereco(request):
    """Gera c√≥digos √∫nicos para todos os endere√ßos"""
    if request.method == 'POST':
        enderecos_sem_codigo = Armazenamento.objects.filter(
            models.Q(codigo__isnull=True) | models.Q(codigo='')
        )
        
        atualizados = 0
        for endereco in enderecos_sem_codigo:
            codigo_novo = f"{str(endereco.rua).zfill(2)}-{str(endereco.predio).zfill(2)}-{str(endereco.nivel).zfill(2)}-{str(endereco.ap).zfill(2)}"
            endereco.codigo = codigo_novo
            endereco.save()
            atualizados += 1
        
        messages.success(request, f'{atualizados} endere√ßos atualizados com c√≥digos √∫nicos!')
        return redirect('cadastrar_enderecos')
    
    enderecos_sem_codigo = Armazenamento.objects.filter(
        models.Q(codigo__isnull=True) | models.Q(codigo='')
    ).count()
    
    return render(request, 'produtos/gerar_codigos.html', {
        'enderecos_sem_codigo': enderecos_sem_codigo,
    })
'''
    
    print("‚úÖ Views melhoradas criadas (ser√° integrado ao views.py)")
    
    return view_busca_avancada

def atualizar_modelo_armazenamento():
    """Atualiza o modelo Armazenamento com novos campos"""
    print("\n=== ATUALIZA√á√ÉO DO MODELO ARMAZENAMENTO ===\n")
    
    modelo_atualizado = '''class Armazenamento(models.Model):
    CATEGORIA_CHOICES = [
        ('inteiro', 'Palete Fechado (N√≠vel 2)'),
        ('meio', 'Sa√≠da (N√≠vel 0)'),
    ]
    
    # Campos existentes
    categoria_armazenamento = models.CharField(max_length=10, choices=CATEGORIA_CHOICES, default='inteiro')
    rua = models.CharField(max_length=50)
    predio = models.CharField(max_length=50)
    nivel = models.CharField(max_length=10)
    ap = models.CharField(max_length=10)
    livre = models.BooleanField(default=True)
    capacidade_maxima = models.PositiveIntegerField(default=1)
    observacoes = models.TextField(blank=True, null=True)
    
    # Novos campos para sistema melhorado
    codigo = models.CharField(max_length=20, unique=True, blank=True, null=True, 
                             verbose_name='C√≥digo do Endere√ßo',
                             help_text='C√≥digo √∫nico no formato RUA-PR√âDIO-N√çVEL-AP')
    descricao = models.CharField(max_length=200, blank=True, null=True,
                               verbose_name='Descri√ß√£o',
                               help_text='Descri√ß√£o adicional do endere√ßo')
    ativo = models.BooleanField(default=True, verbose_name='Ativo',
                               help_text='Se o endere√ßo est√° ativo para uso')
    data_criacao = models.DateTimeField(auto_now_add=True, null=True, verbose_name='Data de Cria√ß√£o')
    data_modificacao = models.DateTimeField(auto_now=True, null=True, verbose_name='√öltima Modifica√ß√£o')

    class Meta:
        ordering = ['rua', 'predio', 'nivel', 'ap']
        verbose_name = 'Endere√ßo de Armazenamento'
        verbose_name_plural = 'Endere√ßos de Armazenamento'

    def clean(self):
        """Valida√ß√£o customizada para endere√ßos"""
        super().clean()
        
        # Regra: N√≠vel 0 deve sempre ser 'meio' (√°rea de sa√≠da)
        if str(self.nivel) == '0' and self.categoria_armazenamento != 'meio':
            raise ValidationError({
                'categoria_armazenamento': 'Endere√ßos no n√≠vel 0 devem ser do tipo "meio" (√°rea de sa√≠da).'
            })
        
        # Gerar c√≥digo autom√°tico se n√£o fornecido
        if not self.codigo:
            self.codigo = self.gerar_codigo()
    
    def save(self, *args, **kwargs):
        """Auto-corre√ß√£o: for√ßa n√≠vel 0 como 'meio' e gera c√≥digo"""
        # Garantir que n√≠vel 0 seja sempre 'meio'
        if str(self.nivel) == '0':
            self.categoria_armazenamento = 'meio'
        
        # Gerar c√≥digo autom√°tico se n√£o fornecido
        if not self.codigo:
            self.codigo = self.gerar_codigo()
        
        # Executar valida√ß√£o antes de salvar
        self.full_clean()
        super().save(*args, **kwargs)
    
    def gerar_codigo(self):
        """Gera c√≥digo √∫nico para o endere√ßo"""
        return f"{str(self.rua).zfill(2)}-{str(self.predio).zfill(2)}-{str(self.nivel).zfill(2)}-{str(self.ap).zfill(2)}"
    
    def __str__(self):
        if self.codigo:
            return f"{self.codigo} ({self.rua}-{self.predio}-{self.nivel}-{self.ap})"
        return f"{self.rua}-{self.predio}-{self.nivel}-{self.ap}"
    
    def get_endereco_completo(self):
        """Retorna endere√ßo formatado"""
        return f"Rua {self.rua}, Pr√©dio {self.predio}, N√≠vel {self.nivel}, AP {self.ap}"
    
    def get_qr_url(self):
        """Retorna URL para QR Code do endere√ßo"""
        from django.urls import reverse
        return reverse('qr_endereco', args=[self.id])
    
    def ocupacao_atual(self):
        """Retorna quantos produtos est√£o armazenados neste local"""
        return self.estoque_set.count()
    
    def taxa_ocupacao(self):
        """Retorna a taxa de ocupa√ß√£o em percentual"""
        if self.capacidade_maxima > 0:
            return (self.ocupacao_atual() / self.capacidade_maxima) * 100
        return 0
    
    def get_status_display(self):
        """Retorna status formatado do endere√ßo"""
        ocupacao = self.ocupacao_atual()
        if ocupacao == 0:
            return "üü¢ Vazio"
        elif ocupacao >= self.capacidade_maxima:
            return "üî¥ Cheio"
        else:
            return f"üü° Parcial ({ocupacao}/{self.capacidade_maxima})"
    
    def get_tipo_display(self):
        """Retorna tipo formatado do endere√ßo"""
        if self.categoria_armazenamento == 'inteiro':
            return "üîµ Palete Fechado"
        else:
            return "üü° Sa√≠da"
'''
    
    print("‚úÖ Modelo atualizado preparado")
    print("\nüìù Para aplicar as mudan√ßas:")
    print("   1. Execute python manage.py makemigrations")
    print("   2. Execute python manage.py migrate")
    print("   3. Substitua o modelo no arquivo models.py")
    
    return modelo_atualizado

def main():
    """Fun√ß√£o principal - executa todas as melhorias do sistema"""
    print("üè¢ SISTEMA DE ENDERE√áAMENTO MELHORADO")
    print("=" * 50)
    print("Implementando melhorias visuais e l√≥gicas para gerenciamento profissional")
    print()
    
    try:
        # 1. Verificar estrutura atual
        print("1Ô∏è‚É£ Verificando estrutura atual...")
        total_enderecos = Armazenamento.objects.count()
        enderecos_com_produtos = sum(1 for e in Armazenamento.objects.all() if e.ocupacao_atual() > 0)
        enderecos_vazios = total_enderecos - enderecos_com_produtos
        
        print(f"   üìä Total de endere√ßos: {total_enderecos}")
        print(f"   üü¢ Endere√ßos vazios: {enderecos_vazios}")
        print(f"   üî¥ Endere√ßos ocupados: {enderecos_com_produtos}")
        
        # 2. Criar templates melhorados
        print(f"\n2Ô∏è‚É£ Criando templates melhorados...")
        criar_templates_melhorados()
        
        # 3. Preparar views melhoradas
        print(f"\n3Ô∏è‚É£ Preparando views melhoradas...")
        views_code = criar_views_melhoradas()
        
        # 4. Atualizar modelo
        print(f"\n4Ô∏è‚É£ Preparando modelo atualizado...")
        modelo_code = atualizar_modelo_armazenamento()
        
        # 5. Criar migra√ß√µes
        print(f"\n5Ô∏è‚É£ Criando migra√ß√µes necess√°rias...")
        if criar_migracoes_enderecamento():
            # 6. Gerar c√≥digos para endere√ßos existentes
            print(f"\n6Ô∏è‚É£ Gerando c√≥digos para endere√ßos existentes...")
            atualizar_codigos_enderecos()
        
        print(f"\nüéâ SISTEMA MELHORADO IMPLEMENTADO COM SUCESSO!")
        print("=" * 50)
        print("\n‚úÖ FUNCIONALIDADES ADICIONADAS:")
        print("   ‚Ä¢ üîç Busca avan√ßada de endere√ßos")
        print("   ‚Ä¢ üì± QR Code para cada endere√ßo")
        print("   ‚Ä¢ üè∑Ô∏è C√≥digos √∫nicos autom√°ticos")
        print("   ‚Ä¢ üìä Interface profissional")
        print("   ‚Ä¢ üîÑ Sistema de ordena√ß√£o inteligente")
        print("   ‚Ä¢ üìã Informa√ß√µes detalhadas")
        print("   ‚Ä¢ üé® Design moderno e responsivo")
        
        print(f"\nüì± PR√ìXIMOS PASSOS:")
        print("   1. Adicionar as novas URLs no urls.py")
        print("   2. Integrar as views no views.py")
        print("   3. Testar funcionalidades")
        print("   4. Ajustar templates conforme necess√°rio")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante implementa√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    main()
