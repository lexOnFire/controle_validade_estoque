from django.core.management.base import BaseCommand
from django.db import transaction
from produtos.models import Produto, Estoque, Lote
import re

class Command(BaseCommand):
    help = 'Remove produtos com nomes apenas num√©ricos e valida dados de produtos'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Apenas mostra quais produtos seriam removidos, sem remover',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Remove produtos mesmo se tiverem estoque ou lotes',
        )

    def handle(self, *args, **options):
        self.stdout.write('üîç Analisando produtos cadastrados...\n')
        
        # Buscar produtos com nomes problem√°ticos
        produtos_numericos = []
        produtos_invalidos = []
        
        for produto in Produto.objects.all():
            nome = produto.nome.strip()
            
            # Verificar se o nome √© apenas n√∫meros
            if re.match(r'^\d+$', nome):
                produtos_numericos.append(produto)
            
            # Verificar outros padr√µes inv√°lidos
            elif len(nome) < 2:
                produtos_invalidos.append(produto)
            elif re.match(r'^[^\w\s]+$', nome):  # Apenas s√≠mbolos
                produtos_invalidos.append(produto)
            elif nome.lower() in ['null', 'nan', 'none', '', '-', 'undefined']:
                produtos_invalidos.append(produto)
        
        total_problematicos = len(produtos_numericos) + len(produtos_invalidos)
        
        if total_problematicos == 0:
            self.stdout.write(self.style.SUCCESS('‚úÖ Nenhum produto problem√°tico encontrado!'))
            return
        
        self.stdout.write(f'üìä Produtos problem√°ticos encontrados: {total_problematicos}')
        self.stdout.write(f'   - Nomes apenas num√©ricos: {len(produtos_numericos)}')
        self.stdout.write(f'   - Nomes inv√°lidos: {len(produtos_invalidos)}')
        self.stdout.write('')
        
        # Mostrar detalhes dos produtos problem√°ticos
        if produtos_numericos:
            self.stdout.write('üî¢ Produtos com nomes apenas num√©ricos:')
            for produto in produtos_numericos:
                tem_estoque = Estoque.objects.filter(produto=produto).exists()
                tem_lotes = Lote.objects.filter(produto=produto).exists()
                status = []
                if tem_estoque:
                    status.append('ESTOQUE')
                if tem_lotes:
                    status.append('LOTES')
                status_str = f" [{', '.join(status)}]" if status else " [SEM DEPEND√äNCIAS]"
                
                self.stdout.write(f'   - ID {produto.id}: "{produto.nome}" (C√≥digo: {produto.codigo}){status_str}')
        
        if produtos_invalidos:
            self.stdout.write('\n‚ùå Produtos com nomes inv√°lidos:')
            for produto in produtos_invalidos:
                tem_estoque = Estoque.objects.filter(produto=produto).exists()
                tem_lotes = Lote.objects.filter(produto=produto).exists()
                status = []
                if tem_estoque:
                    status.append('ESTOQUE')
                if tem_lotes:
                    status.append('LOTES')
                status_str = f" [{', '.join(status)}]" if status else " [SEM DEPEND√äNCIAS]"
                
                self.stdout.write(f'   - ID {produto.id}: "{produto.nome}" (C√≥digo: {produto.codigo}){status_str}')
        
        if options['dry_run']:
            self.stdout.write('\nüîç Modo DRY-RUN ativo - nenhum produto ser√° removido.')
            return
        
        # Confirmar remo√ß√£o
        self.stdout.write('\n‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° REMOVER permanentemente os produtos problem√°ticos!')
        self.stdout.write('‚ùå Produtos com estoque/lotes N√ÉO ser√£o removidos (use --force para for√ßar)')
        
        confirm = input('\nDigite "CONFIRMAR" para prosseguir com a remo√ß√£o: ')
        if confirm != 'CONFIRMAR':
            self.stdout.write('‚ùå Opera√ß√£o cancelada.')
            return
        
        # Remover produtos
        removidos = 0
        pulados = 0
        
        with transaction.atomic():
            todos_problematicos = produtos_numericos + produtos_invalidos
            
            for produto in todos_problematicos:
                tem_estoque = Estoque.objects.filter(produto=produto).exists()
                tem_lotes = Lote.objects.filter(produto=produto).exists()
                
                if (tem_estoque or tem_lotes) and not options['force']:
                    self.stdout.write(f'‚è≠Ô∏è  Pulando produto "{produto.nome}" (ID {produto.id}) - possui depend√™ncias')
                    pulados += 1
                    continue
                
                try:
                    # Se --force, remover depend√™ncias primeiro
                    if options['force']:
                        if tem_estoque:
                            Estoque.objects.filter(produto=produto).delete()
                        if tem_lotes:
                            Lote.objects.filter(produto=produto).delete()
                    
                    nome_produto = produto.nome
                    codigo_produto = produto.codigo
                    produto.delete()
                    
                    self.stdout.write(f'üóëÔ∏è  Removido: "{nome_produto}" (C√≥digo: {codigo_produto})')
                    removidos += 1
                    
                except Exception as e:
                    self.stdout.write(f'‚ùå Erro ao remover produto "{produto.nome}": {str(e)}')
        
        # Resumo final
        self.stdout.write('\nüìä RESUMO DA OPERA√á√ÉO:')
        self.stdout.write(f'   ‚úÖ Produtos removidos: {removidos}')
        self.stdout.write(f'   ‚è≠Ô∏è  Produtos pulados: {pulados}')
        
        if removidos > 0:
            self.stdout.write(self.style.SUCCESS(f'\nüéâ Limpeza conclu√≠da! {removidos} produtos problem√°ticos foram removidos.'))
        else:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  Nenhum produto foi removido.'))
        
        # Verificar se ainda h√° produtos problem√°ticos
        produtos_restantes = 0
        for produto in Produto.objects.all():
            nome = produto.nome.strip()
            if (re.match(r'^\d+$', nome) or 
                len(nome) < 2 or 
                re.match(r'^[^\w\s]+$', nome) or 
                nome.lower() in ['null', 'nan', 'none', '', '-', 'undefined']):
                produtos_restantes += 1
        
        if produtos_restantes > 0:
            self.stdout.write(f'\n‚ö†Ô∏è  Ainda restam {produtos_restantes} produtos problem√°ticos (provavelmente com depend√™ncias)')
            self.stdout.write('   Use --force para remover produtos com estoque/lotes')
        else:
            self.stdout.write(self.style.SUCCESS('\n‚ú® Todos os produtos problem√°ticos foram removidos!'))
