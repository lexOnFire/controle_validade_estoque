#!/usr/bin/env python
"""
Script para verificar e corrigir endere√ßos no n√≠vel 0
"""
import os
import sys
import django

# Configurar Django
sys.path.append('/workspaces/controle_validade_estoque')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'validade_estoque.settings')
django.setup()

from produtos.models import Armazenamento, Estoque

def verificar_nivel_0():
    print("üîç VERIFICA√á√ÉO: Endere√ßos N√≠vel 0")
    print("=" * 50)
    
    # Buscar todos os endere√ßos no n√≠vel 0
    enderecos_nivel_0 = Armazenamento.objects.filter(nivel=0)
    
    print(f"üìä Total de endere√ßos no n√≠vel 0: {enderecos_nivel_0.count()}")
    
    # Separar por tipo
    nivel_0_inteiros = enderecos_nivel_0.filter(categoria_armazenamento='inteiro')
    nivel_0_meios = enderecos_nivel_0.filter(categoria_armazenamento='meio')
    
    print(f"\nüìã SITUA√á√ÉO ATUAL:")
    print(f"   ‚Ä¢ N√≠vel 0 marcados como 'inteiro': {nivel_0_inteiros.count()}")
    print(f"   ‚Ä¢ N√≠vel 0 marcados como 'meio': {nivel_0_meios.count()}")
    
    # Mostrar alguns endere√ßos incorretos
    if nivel_0_inteiros.exists():
        print(f"\n‚ö†Ô∏è  ENDERE√áOS INCORRETOS (n√≠vel 0 como 'inteiro'):")
        for endereco in nivel_0_inteiros[:10]:  # Mostrar at√© 10
            ocupacao = Estoque.objects.filter(local=endereco).count()
            status = f" - {ocupacao} produto(s)" if ocupacao > 0 else " - vazio"
            print(f"   ‚Ä¢ {endereco}{status}")
        
        if nivel_0_inteiros.count() > 10:
            print(f"   ... e mais {nivel_0_inteiros.count() - 10} endere√ßos")
    
    # Mostrar endere√ßos corretos
    if nivel_0_meios.exists():
        print(f"\n‚úÖ ENDERE√áOS CORRETOS (n√≠vel 0 como 'meio'):")
        for endereco in nivel_0_meios[:5]:  # Mostrar at√© 5
            ocupacao = Estoque.objects.filter(local=endereco).count()
            status = f" - {ocupacao} produto(s)" if ocupacao > 0 else " - vazio"
            print(f"   ‚Ä¢ {endereco}{status}")
        
        if nivel_0_meios.count() > 5:
            print(f"   ... e mais {nivel_0_meios.count() - 5} endere√ßos")
    
    return nivel_0_inteiros

def corrigir_nivel_0():
    print(f"\nüîß CORRE√á√ÉO: Alterando endere√ßos n√≠vel 0 para 'meio'")
    print("=" * 55)
    
    # Buscar endere√ßos n√≠vel 0 marcados incorretamente
    enderecos_incorretos = Armazenamento.objects.filter(
        nivel=0,
        categoria_armazenamento='inteiro'
    )
    
    if not enderecos_incorretos.exists():
        print("‚úÖ Todos os endere√ßos n√≠vel 0 j√° est√£o corretos!")
        return
    
    print(f"üîÑ Corrigindo {enderecos_incorretos.count()} endere√ßo(s)...")
    
    # Separar por ocupa√ß√£o
    enderecos_vazios = []
    enderecos_ocupados = []
    
    for endereco in enderecos_incorretos:
        ocupacao = Estoque.objects.filter(local=endereco).count()
        if ocupacao > 0:
            enderecos_ocupados.append((endereco, ocupacao))
        else:
            enderecos_vazios.append(endereco)
    
    print(f"\nüìä AN√ÅLISE:")
    print(f"   ‚Ä¢ Endere√ßos vazios para corrigir: {len(enderecos_vazios)}")
    print(f"   ‚Ä¢ Endere√ßos ocupados para corrigir: {len(enderecos_ocupados)}")
    
    # Corrigir endere√ßos vazios
    if enderecos_vazios:
        print(f"\n‚úÖ CORRIGINDO ENDERE√áOS VAZIOS:")
        for endereco in enderecos_vazios:
            endereco.categoria_armazenamento = 'meio'
            endereco.save()
            print(f"   ‚Ä¢ {endereco} ‚Üí alterado para 'meio'")
        print(f"   ‚úì {len(enderecos_vazios)} endere√ßo(s) vazio(s) corrigidos!")
    
    # Corrigir endere√ßos ocupados (com cuidado)
    if enderecos_ocupados:
        print(f"\n‚ö†Ô∏è  CORRIGINDO ENDERE√áOS OCUPADOS:")
        for endereco, ocupacao in enderecos_ocupados:
            endereco.categoria_armazenamento = 'meio'
            endereco.save()
            print(f"   ‚Ä¢ {endereco} ‚Üí alterado para 'meio' (tinha {ocupacao} produto(s))")
        print(f"   ‚úì {len(enderecos_ocupados)} endere√ßo(s) ocupado(s) corrigidos!")
    
    print(f"\nüéâ CORRE√á√ÉO CONCLU√çDA!")
    
    # Verificar resultado final
    nivel_0_ainda_incorretos = Armazenamento.objects.filter(
        nivel=0,
        categoria_armazenamento='inteiro'
    ).count()
    
    nivel_0_corretos = Armazenamento.objects.filter(
        nivel=0,
        categoria_armazenamento='meio'
    ).count()
    
    print(f"\nüìä RESULTADO FINAL:")
    print(f"   ‚Ä¢ N√≠vel 0 como 'meio': {nivel_0_corretos} ‚úÖ")
    print(f"   ‚Ä¢ N√≠vel 0 como 'inteiro': {nivel_0_ainda_incorretos} {'‚úÖ' if nivel_0_ainda_incorretos == 0 else '‚ö†Ô∏è'}")

if __name__ == "__main__":
    try:
        # Verificar situa√ß√£o atual
        enderecos_incorretos = verificar_nivel_0()
        
        if enderecos_incorretos.exists():
            print(f"\n" + "="*60)
            resposta = input("üîß Deseja corrigir os endere√ßos incorretos? (s/n): ").lower().strip()
            
            if resposta in ['s', 'sim', 'y', 'yes']:
                corrigir_nivel_0()
            else:
                print("‚ùå Corre√ß√£o cancelada pelo usu√°rio.")
        else:
            print(f"\nüéâ PERFEITO! Todos os endere√ßos n√≠vel 0 j√° est√£o corretos!")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a verifica√ß√£o: {str(e)}")
        import traceback
        traceback.print_exc()
